x-index-pg-access: &index-pg-access
  POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
  POSTGRES_DB: ${POSTGRES_DB:-ton_index}

services:
  event-cache:
    image: redis:8-alpine
    networks:
      - internal
    command: redis-server --maxclients 40000
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  event-classifier:
    image: toncenter/ton-indexer-classifier:v1.2.2
    build:
      context: indexer
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      event-cache:
        condition: service_healthy
    secrets:
      - postgres_password
    command: --pool-size ${TON_INDEXER_WORKERS:-8} --prefetch-size 10000 --batch-size 1000
    environment: 
      <<: *index-pg-access
      TON_INDEXER_REDIS_DSN: redis://event-cache:6379
      TON_INDEXER_IS_TESTNET: ${TON_INDEXER_IS_TESTNET:-0}
    restart: unless-stopped
    networks:
      internal:

  index-api:
    image: toncenter/ton-indexer-api:v1.2.2
    build:
      context: .
      dockerfile: ton-index-go/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      run-migrations:
        condition: service_completed_successfully
    secrets:
      - postgres_password
    command: -prefork -threads ${TON_INDEXER_WORKERS:-1}
    ports:
      - target: 8081
        published: ${TON_INDEXER_API_PORT:-8081}
    environment:
      <<: *index-pg-access
      TON_INDEXER_API_ROOT_PATH: ${TON_INDEXER_API_ROOT_PATH:-/}
      TON_INDEXER_API_PORT: ${TON_INDEXER_API_PORT:-8081}
      TON_INDEXER_TON_HTTP_API_ENDPOINT: ${TON_INDEXER_TON_HTTP_API_ENDPOINT:-}
      TON_INDEXER_IS_TESTNET: ${TON_INDEXER_IS_TESTNET:-0}
      TON_INDEXER_IMGPROXY_BASEURL: ${TON_INDEXER_IMGPROXY_BASEURL:-}
    restart: unless-stopped
    networks:
      internal:

  run-migrations:
    image: toncenter/ton-indexer-worker:v1.2.2
    build:
      context: ton-index-worker
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    secrets:
      - postgres_password
    environment: 
      <<: *index-pg-access
      TON_WORKER_BINARY: ton-index-postgres-migrate
    networks:
      internal:
    command: ton-index-postgres-migrate --pg postgresql://${POSTGRES_USER}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    restart: on-failure

  index-worker:
    image: toncenter/ton-indexer-worker:v1.2.2
    build:
      context: ton-index-worker
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      run-migrations:
        condition: service_completed_successfully
    secrets:
      - postgres_password
    volumes:
      - ${TON_WORKER_DBROOT:-/var/ton-work/db}:/tondb:ro
      - ton_index_workdir:/ton_index_workdir
    environment:
      <<: *index-pg-access
      TON_WORKER_BINARY: ton-index-postgres
      TON_INDEXER_IS_TESTNET: ${TON_INDEXER_IS_TESTNET:-0}
    networks:
      internal:
    command: ton-index-postgres --pg postgresql://${POSTGRES_USER}@postgres:${POSTGRES_PORT}/${POSTGRES_DB} --db /tondb --working-dir /ton_index_workdir --from ${TON_WORKER_FROM:?} ${TON_WORKER_ADDITIONAL_ARGS:-}
    restart: unless-stopped

  postgres:
    image: postgres:17
    environment: 
      <<: *index-pg-access
    ports:
      - ${POSTGRES_PUBLISH_PORT:-5432}:5432
    secrets:
      - postgres_password
    command: postgres ${POSTGRES_ADDITIONAL_ARGS:-}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    shm_size: 2G
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      internal:
    logging:
      driver: local
      options:
        max-size: 4G

  metadata-fetcher:
    profiles: [metadata]
    image: toncenter/ton-indexer-metadata-fetcher:v1.2.2
    build:
      context: ton-metadata-fetcher
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      run-migrations:
        condition: service_completed_successfully
    restart: unless-stopped
    secrets:
      - postgres_password
    networks:
      internal:
    environment:
      <<: *index-pg-access
    command: -imgproxy-salt ${IMGPROXY_SALT?} -imgproxy-key ${IMGPROXY_KEY?} -processes 8

  imgproxy:
    profiles: [metadata]
    image: ghcr.io/imgproxy/imgproxy:v3.29
    environment: 
      IMGPROXY_SALT: ${IMGPROXY_SALT?}
      IMGPROXY_KEY: ${IMGPROXY_KEY?}
      IMGPROXY_PRESETS: "small=rt:auto/w:128/h:128,medium=rt:auto/w:300/h:300,big=rt:auto/w:512/h:512"
      IMGPROXY_USER_AGENT:
    restart: unless-stopped
    ports:
      - ${IMGPROXY_PORT:-8201}:8080
    networks:
      internal:

volumes:
  postgres_data:
    external: false
  ton_index_workdir:
    external: false

networks:
  internal:
    attachable: true
    external: false

secrets:
  postgres_password:
    file: ${POSTGRES_PASSWORD_FILE:-private/postgres_password}

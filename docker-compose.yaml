version: '3.3'
services:
  web:
    build:
      context: .
      dockerfile: deploy/api.Dockerfile
    # ports:
    #   - ${TON_INDEXER_HTTP_PORT:-80}:8081
    environment:
      ROOT_PATH: ${TON_INDEXER_ROOT_PATH:-/}
    secrets:
      - postgres_password
    restart: unless-stopped
    command: -w=${TON_INDEXER_WEBSERVER_WORKERS_COUNT:-1} --bind=0.0.0.0:8081
    networks:
      internal:
      toncenter-global:
        aliases:
          - testnet-b-indexer-api
  backward_indexer:
    build:
      context: .
      dockerfile: deploy/indexer.Dockerfile
    command: --concurrency ${TON_INDEXER_BACKWARD_WORKERS_COUNT:-5} -Q backward_queue
    restart: on-failure
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      USE_GET_BLOCK_TRANSACTIONS_EXT: ${TON_INDEXER_USE_GET_BLOCK_TRANSACTIONS_EXT:-0}
    secrets:
      - postgres_password
      - tonlib_config
    networks:
      internal:
    depends_on:
      - rabbitmq
      - postgres
  backward_scheduler:
    build:
      context: .
      dockerfile: deploy/scheduler.Dockerfile
    command: backward backward_queue
    restart: on-failure
    environment:
      START_SEQNO: ${TON_INDEXER_START_SEQNO:?start masterchain seqno is required}
      BOTTOM_SEQNO: ${TON_INDEXER_BOTTOM_SEQNO:?bottom masterchain seqno is required}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      WORKERS_COUNT: ${TON_INDEXER_BACKWARD_WORKERS_COUNT:-5}
    secrets:
      - postgres_password
      - tonlib_config
    networks:
      internal:
    depends_on:
      backward_indexer:
        condition: service_started
      postgres:
        condition: service_healthy
  forward_indexer:
    build:
      context: .
      dockerfile: deploy/indexer.Dockerfile
    command: --concurrency ${TON_INDEXER_FORWARD_WORKERS_COUNT:-2} -Q forward_queue
    restart: unless-stopped
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      USE_GET_BLOCK_TRANSACTIONS_EXT: ${TON_INDEXER_USE_GET_BLOCK_TRANSACTIONS_EXT:-0}
    secrets:
      - postgres_password
      - tonlib_config
    networks:
      internal:
    depends_on:
      - rabbitmq
      - postgres
  forward_scheduler:
    build:
      context: .
      dockerfile: deploy/scheduler.Dockerfile
    command: forward forward_queue
    restart: unless-stopped
    environment:
      START_SEQNO: ${TON_INDEXER_START_SEQNO:?start masterchain seqno is required}
      BOTTOM_SEQNO: ${TON_INDEXER_BOTTOM_SEQNO:?bottom masterchain seqno is required}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
      WORKERS_COUNT: ${TON_INDEXER_FORWARD_WORKERS_COUNT:-2}
    secrets:
      - postgres_password
      - tonlib_config
    networks:
      internal:
    depends_on:
      forward_indexer:
        condition: service_started
      postgres:
        condition: service_healthy
  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    networks:
      internal:
  redis:
    image: redis:latest
    restart: unless-stopped
    networks:
      internal:
  postgres:
    image: postgres:14
    command: postgres -c max_connections=1000 -c shared_buffers=2GB -c work_mem=2GB
    restart: unless-stopped
    shm_size: 8gb
    networks:
      internal:
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    # ports:
    #   - 5432:5432
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
volumes:
  postgres_data:
    external: false
networks:
  internal:
  toncenter-global:
    external: true
secrets:
  postgres_password:
    file: private/postgres_password
  tonlib_config:
    file: ${TON_INDEXER_LITE_SERVER_CONFIG:?liteserver config file is required}

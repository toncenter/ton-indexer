- name: Resolve repo path & SHA
  hosts: localhost
  gather_facts: false
  tasks:
    - ansible.builtin.set_fact:
        repo_dir: "{{ lookup('env','SEMAPHORE_GIT_DIR') | default('.', true) }}"
        git_sha: "{{ (lookup('env','SEMAPHORE_GIT_SHA') | default(''))[0:12] }}"
      run_once: true

- name: Prepare to build
  hosts: builder
  gather_facts: true
  tasks:
    - name: Install requirements
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        name:
          - build-essential
          - cmake
          - clang
          - openssl
          - libssl-dev
          - zlib1g-dev
          - gperf
          - wget
          - git
          - curl
          - liblz4-dev
          - pkg-config
          - libsecp256k1-dev
          - libsodium-dev
          - libhiredis-dev
          - python3-dev
          - libpq-dev
          - automake
          - libjemalloc-dev
          - lsb-release
          - software-properties-common
          - gnupg
          - autoconf
          - libtool
          - libmicrohttpd-dev
          - ccache
          - rsync
        state: present
      become: true
    
    - name: Ensure shared caches exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0775"
      loop:
        - "{{ ansible_env.HOME }}/.cache/ccache"
        - "{{ ansible_env.HOME }}/.cache/go-build"
        - "{{ ansible_env.HOME }}/.cache/gomod"

    - name: Ensure golang is installed
      ansible.builtin.include_role:
        name: geerlingguy.go
        apply:
          become: true
      vars:
        go_version: "1.24.7"
        go_checksum: "da18191ddb7db8a9339816f3e2b54bdded8047cdc2a5d67059478f8d1595c43f"

- name: Build ton-indexer binaries
  hosts: builder
  gather_facts: true
  tasks:
    - name: Create temp workspace
      ansible.builtin.tempfile:
        state: directory
        suffix: ton-indexer
      register: builddir

    - block:
        - name: Copy project to builder from . to "{{ builddir.path }}" with rsync
          ansible.builtin.synchronize:
            src: "{{ hostvars['localhost'].repo_dir }}/"
            dest: "{{ builddir.path }}"
            rsync_opts:
              - "--exclude=.git"
              - "--exclude=artifacts"
            recursive: yes
            delete: no

        - name: Build ton-trace-emulator and ton-trace-ttl-tracker
          ansible.builtin.shell: |
            set -e
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -S . -B "{{ builddir.path }}/build" \
                  -G Ninja \
                  -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache 
            cmake --build "{{ builddir.path }}/build" \
                  --parallel {{ ansible_facts.processor_vcpus | default(2) }} \
                  --target ton-trace-emulator ton-trace-ttl-tracker
          args:
            chdir: "{{ builddir.path }}"
          environment:
            CCACHE_DIR: "{{ ansible_env.HOME }}/.cache/ccache"
            CCACHE_BASEDIR: "{{ builddir.path }}"
            CCACHE_SLOPPINESS: "file_macro"
            GOCACHE: "{{ ansible_env.HOME }}/.cache/go-build"
            GOMODCACHE: "{{ ansible_env.HOME }}/.cache/gomod"
            GOFLAGS: "-modcacherw"

        - name: Collect built binaries
          ansible.builtin.fetch:
            src: "{{ builddir.path }}/build/{{ item }}"
            dest: "artifacts/{{ hostvars['localhost'].git_sha }}/"
            flat: true
          loop:
            - "ton-index-worker/ton-trace-emulator/ton-trace-emulator"
            - "ton-trace-ttl-tracker/ton-trace-ttl-tracker"
            - "ton-index-worker/ton-marker/libton-marker.so"
      always:
        - name: Cleanup workspace
          ansible.builtin.file:
            path: "{{ builddir.path }}"
            state: absent

- name: Deploy services
  hosts: "{{ stack_name }}__pendings"
  become: true
  tags: [deploy]
  vars:
    artifact_root: "artifacts/{{ hostvars['localhost'].git_sha }}"
  tasks:
    - name: Ensure binary directory
      ansible.builtin.file:
        path: "{{ deploy_path }}"
        recurse: true
        state: directory

    - name: Install requirements
      ansible.builtin.apt:
        name:
          - python3-pip
          - python3-venv
          - dnsutils
          - libpq-dev
          - libsecp256k1-dev
          - libsodium-dev
          - libhiredis-dev
        state: present

    - name: Copy binaries
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "0755"
        force: true
      with_items:
        - src: "{{ artifact_root }}/ton-trace-emulator"
          dest: "{{ deploy_path }}/{{ stack_name }}__trace_emulator"
        - src: "{{ artifact_root }}/ton-trace-ttl-tracker"
          dest: "{{ deploy_path }}/{{ stack_name }}__trace_ttl_tracker"
    
    - name: Install libton-marker.so
      ansible.builtin.copy:
        src: "{{ artifact_root }}/libton-marker.so"
        dest: "/usr/lib/libton-marker.so"
        mode: "0644"

    - name: Refresh linker cache
      ansible.builtin.command: ldconfig
      changed_when: false

    - name: Copy python module
      ansible.builtin.copy:
        src: indexer
        dest: "{{ deploy_path }}"

    - name: Setup venv
      ansible.builtin.pip:
        requirements: "{{ deploy_path }}/indexer/requirements.txt"
        virtualenv: "{{ deploy_path }}/venv"
        virtualenv_command: "python3 -m venv"
        extra_args: "--no-cache-dir"
    
    - name: Setup trace_emulator and trace_ttl_tracker service
      ansible.builtin.template:
        src: "ansible/systemd.service.j2"
        dest: "{{ systemd_service_path }}/{{ service_name }}.service"
        mode: "0644"
        force: true
      vars:
        service: "{{ services[item] }}"
        service_name: "{{ stack_name }}__{{ item }}"
        start_cmd: "{{ deploy_path }}/{{ service_name }} {{ service.additional_args }}"
      with_items:
        - trace_emulator
        - trace_ttl_tracker
    
    - name: Setup action classifier service
      ansible.builtin.template:
        src: "ansible/systemd.service.j2"
        dest: "{{ systemd_service_path }}/{{ service_name }}.service"
        mode: "0644"
        force: true
      vars:
        service: "{{ services.pendings_action_classifier }}"
        service_name: "{{ stack_name }}__{{ service.service_name }}"
        start_cmd: "{{ deploy_path }}/venv/bin/python3 {{ deploy_path }}/indexer/event_classifier.py {{ service.additional_args }}"

    - name: Install and configure Redis
      ansible.builtin.include_role:
        name: geerlingguy.redis
      vars:
        redis_bind_interface: '0.0.0.0'
        redis_requirepass: "{{ pendings_redis_password }}"

    - name: Restart and enable pendings services
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: restarted
        enabled: true
        force: true
        daemon_reload: true
      vars:
        service_name: "{{ stack_name }}__{{ item }}"
      throttle: 1
      with_items:
       - trace_emulator
       - pendings_action_classifier
       - trace_ttl_tracker

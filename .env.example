## TON Indexer configuration example

# Masterchain block seqno to start indexing from. Make sure that the node contains all blocks from this seqno.
TON_WORKER_FROM=
# Path to TON full node database. Usually it is "/var/ton-work/db/" if you've installed node with mytonctrl.
TON_WORKER_DBROOT=/var/ton-work/db/
# Additional arguments for ton-index-postgres worker.
TON_WORKER_ADDITIONAL_ARGS=

# Port to publish by TON Indexer API.
TON_INDEXER_API_PORT=8081
# TON HTTP API endpoint. If left empty some proxy methods (such as POST /message) won't work.
TON_INDEXER_TON_HTTP_API_ENDPOINT=
# Base path for TON Indexer API. Useful for reverse proxy setups.
TON_INDEXER_API_ROOT_PATH=/
# Whether to testnet or mainnet is being indexed. 
# It affects address formats and interfaces detecting (e.g. TON DNS collection has different address in testnet)
TON_INDEXER_IS_TESTNET=0
# Baseurl is used to proxied metadata, will be substituted in proxied urls
TON_INDEXER_IMGPROXY_BASEURL=http://localhost:8201/

# PostgreSQL instance connection settings. 
# By default, it uses the `postgres` service in the same Docker network.
# If you want to use a different PostgreSQL instance, set these variables accordingly.
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD_FILE=private/postgres_password
POSTGRES_DB=ton_index
# Port to publish by PostgreSQL instance.
POSTGRES_PUBLISH_PORT=5432
# Additional arguments for PostgreSQL instance
POSTGRES_ADDITIONAL_ARGS="-c max_connections=1024 -c shared_buffers=4GB -c work_mem=64MB -c max_wal_size=1GB -c tcp_keepalives_idle=60 -c tcp_keepalives_interval=60 -c tcp_keepalives_count=60"

# Metadata and ImageProxy settings
# Salt and Key are used to sign proxied image urls, hex strings are expected
# Use command `openssl rand -hex 16` or `head -c 16 /dev/urandom | xxd -p` to generate salt and private key
IMGPROXY_SALT=
IMGPROXY_KEY=
IMGPROXY_PORT=8201
# Specify some user agent to avoid blocking from hosting services
IMGPROXY_USER_AGENT="Chrome/133.0.0.0"

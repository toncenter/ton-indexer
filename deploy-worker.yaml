- name: Prepare to build
  hosts: builder
  gather_facts: true
  tasks:
    - name: Install requirements
      become: true
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        name:
          - build-essential
          - cmake
          - clang
          - ninja-build
          - openssl
          - libssl-dev
          - zlib1g-dev
          - gperf
          - wget
          - git
          - curl
          - liblz4-dev
          - pkg-config
          - libsecp256k1-dev
          - libsodium-dev
          - libhiredis-dev
          - python3-dev
          - libpq-dev
          - automake
          - libjemalloc-dev
          - lsb-release
          - software-properties-common
          - gnupg
          - autoconf
          - libtool
          - libmicrohttpd-dev
          - ccache
          - rsync
        state: present

    - name: Ensure shared caches exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0775"
      loop:
        - "{{ ansible_env.HOME }}/.cache/ccache"
        - "{{ ansible_env.HOME }}/.cache/go-build"
        - "{{ ansible_env.HOME }}/.cache/gomod"

    - name: Ensure golang is installed
      ansible.builtin.include_role:
        name: geerlingguy.go
        apply:
          become: true
      vars:
        go_version: "1.24.7"
        go_checksum: "da18191ddb7db8a9339816f3e2b54bdded8047cdc2a5d67059478f8d1595c43f"

- name: Build ton-indexer binaries
  hosts: builder
  gather_facts: true
  tasks:
    - name: Create temp workspace
      ansible.builtin.tempfile:
        state: directory
        suffix: ton-indexer
      register: builddir

    - block:
        - name: Copy project to builder from . to "{{ builddir.path }}" with rsync
          ansible.builtin.synchronize:
            src: "./"
            dest: "{{ builddir.path }}"
            rsync_opts:
              - "--exclude=.git"
              - "--exclude=artifacts"
            recursive: yes
            delete: no

        - name: Build ton-index-go and ton-metadata-fetcher
          ansible.builtin.shell: |
            set -e
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -S . -B "{{ builddir.path }}/build" \
                  -G Ninja \
                  -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache 
            cmake --build "{{ builddir.path }}/build" \
                  --parallel {{ ansible_facts.processor_vcpus | default(2) }} \
                  --target ton-index-postgres ton-index-postgres-migrate
          args:
            chdir: "{{ builddir.path }}"
          environment:
            CCACHE_DIR: "{{ ansible_env.HOME }}/.cache/ccache"
            CCACHE_BASEDIR: "{{ builddir.path }}"
            CCACHE_SLOPPINESS: "file_macro"
            GOCACHE: "{{ ansible_env.HOME }}/.cache/go-build"
            GOMODCACHE: "{{ ansible_env.HOME }}/.cache/gomod"
            GOFLAGS: "-modcacherw"

        - name: Collect built binaries
          ansible.builtin.fetch:
            src: "{{ builddir.path }}/build/{{ item }}"
            dest: "artifacts/"
            flat: true
          loop:
            - "ton-index-worker/ton-index-postgres/ton-index-postgres"
            - "ton-index-worker/ton-index-postgres/ton-index-postgres-migrate"
      always:
        - name: Cleanup workspace
          ansible.builtin.file:
            path: "{{ builddir.path }}"
            state: absent

- name: Run migrations and deploy ton-index-postgres service
  hosts: "{{ stack_name }}__worker_nodes"
  become: true
  tags: [deploy]
  vars:
    service_name: "{{ stack_name }}__index_postgres"
    service: "{{ services.index_postgres }}"

  tasks:
    - block:
        - name: Ensure binary directory
          ansible.builtin.file:
            path: "{{ deploy_path }}"
            recurse: true
            state: directory

        - name: Stop service
          ansible.builtin.systemd:
            name: "{{ service_name }}"
            state: stopped
            enabled: false
            daemon_reload: true
          ignore_errors: true

        - name: Copy migrate binary
          ansible.builtin.copy:
            src: "artifacts/ton-index-postgres-migrate"
            dest: "{{ deploy_path }}/{{ service_name }}_migrate"
            mode: "0755"
            owner: root
            group: root

        - name: Run migration (fails the block if rc != 0)
          run_once: true
          ansible.builtin.command:
            argv:
              - "{{ deploy_path }}/{{ service_name }}_migrate"
              - "--pg"
              - "postgresql://{{ pg_master_user }}:{{ pg_master_password }}@{{ pg_master_host }}:5432/{{ pg_database }}"
              - "--no-create-indexes"
              # - "--rerun-last-migration"
          register: migrate_result

        - name: Assert migration succeeded
          ansible.builtin.assert:
            that: migrate_result.rc == 0
            fail_msg: "DB migration failed. Rolling back to previously running service."

        - name: Copy ton-index-postgres binary
          ansible.builtin.copy:
            src: "artifacts/ton-index-postgres"
            dest: "{{ deploy_path }}/{{ service_name }}"
            mode: "0755"
            owner: root
            group: root

        - name: Create systemd service from template
          ansible.builtin.template:
            src: "ansible/systemd.service.j2"
            dest: "{{ systemd_service_path }}/{{ service_name }}.service"
            mode: "0644"
            owner: root
            group: root
            force: true
          vars:
            pg_dsn: "postgresql://{{ pg_master_user }}:{{ pg_master_password }}@{{ pg_master_host }}:5432/{{ pg_database }}?application_name={{ service_name }}"
            start_cmd: "{{ deploy_path }}/{{ service_name }} --pg {{ pg_dsn }} {{ service.additional_args }}"

        - name: Restart and enable service
          ansible.builtin.systemd:
            name: "{{ service_name }}"
            state: restarted
            enabled: true
            daemon_reload: true

      rescue:
        - name: Start previous version to keep service available
          ansible.builtin.systemd:
            name: "{{ service_name }}"
            state: started
            enabled: true
            daemon_reload: true

        # Optional: stop the rollout everywhere if migration failed
        - name: End the play due to migration failure
          run_once: true
          ansible.builtin.meta: end_play

      always:
        - name: Clean up migrate binary
          ansible.builtin.file:
            path: "{{ deploy_path }}/{{ service_name }}_migrate"
            state: absent

# Precompute git SHA on the controller so all plays can use it
- name: Resolve repo path & SHA
  hosts: localhost
  gather_facts: false
  tasks:
    - ansible.builtin.set_fact:
        repo_dir: "{{ lookup('env','SEMAPHORE_GIT_DIR') | default('.', true) }}"
        git_sha: "{{ (lookup('env','SEMAPHORE_GIT_SHA') | default(''))[0:12] }}"
      run_once: true

- name: Prepare to build
  hosts: builder
  gather_facts: true
  tasks:
    - name: Install requirements
      become: true
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        name:
          - build-essential
          - cmake
          - clang
          - openssl
          - libssl-dev
          - zlib1g-dev
          - gperf
          - wget
          - git
          - curl
          - liblz4-dev
          - pkg-config
          - libsecp256k1-dev
          - libsodium-dev
          - libhiredis-dev
          - python3-dev
          - libpq-dev
          - automake
          - libjemalloc-dev
          - lsb-release
          - software-properties-common
          - gnupg
          - autoconf
          - libtool
          - libmicrohttpd-dev
          - ccache
          # - rsync   # (optional, if you switch to synchronize)
        state: present

    - name: Create temp workspace
      ansible.builtin.tempfile:
        state: directory
        suffix: ton-indexer
      register: builddir

    - block:
        - name: Copy project to builder from . to "{{ builddir.path }}/source" with rsync
          ansible.builtin.synchronize:
            src: "{{ playbook_dir }}"
            dest: "{{ builddir.path }}/source"
            rsync_opts:
              - "--exclude=.git"
              - "--exclude=artifacts"
              - "--exclude=ansible/vault.yml"
              - "--exclude=*log"
              - "--exclude=*.yaml"
              - "--exclude=*.yml"
              - "--exclude=deploy-*.yaml"
            recursive: yes
            delete: no

        - name: Build ton-index-go and ton-metadata-fetcher
          ansible.builtin.shell: |
            set -e
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -S . -B "{{ builddir.path }}"
            cmake --build "{{ builddir.path }}" \
                  --parallel {{ ansible_facts.processor_vcpus | default(2) }} \
                  --target ton-index-go ton-metadata-fetcher
          args:
            chdir: "{{ builddir.path }}/source"

        - name: Collect built binaries
          ansible.builtin.fetch:
            src: "{{ builddir.path }}/{{ item }}"
            dest: "artifacts/{{ hostvars['localhost'].git_sha }}/"
            flat: true
          loop:
            - "ton-index-go/ton-index-go"
            - "ton-metadata-fetcher/ton-metadata-fetcher"
            - "ton-index-worker/ton-marker/libton-marker.so"
      # always:
      #   - name: Cleanup workspace
      #     ansible.builtin.file:
      #       path: "{{ builddir.path }}"
      #       state: absent

# Handlers are shared by the deploy plays below
- name: Deploy metadata_fetcher service on master nodes
  hosts: "{{ stack_name }}__master_nodes"
  become: true
  serial: 1
  vars:
    service: "{{ services.metadata_fetcher }}"
    service_name: "{{ stack_name }}__{{ service.service_name }}"
    artifact_root: "artifacts/{{ hostvars['localhost'].git_sha }}"
  handlers:
    - name: restart service
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: restarted
        enabled: true
        daemon_reload: true
      throttle: 1
  tasks:
    - name: Ensure binary directory
      ansible.builtin.file:
        path: "{{ deploy_path }}"
        state: directory
        mode: "0755"

    - name: Copy service binary
      ansible.builtin.copy:
        src: "{{ artifact_root }}/{{ service.binary_path }}"
        dest: "{{ deploy_path }}/{{ service_name }}"
        mode: "0755"
        owner: root
        group: root
      notify: restart service

    - name: Create systemd service from template
      ansible.builtin.template:
        src: "ansible/systemd.service.j2"
        dest: "{{ systemd_service_path }}/{{ service_name }}.service"
        mode: "0644"
        owner: root
        group: root
        force: true
      vars:
        pg_dsn: "postgresql://{{ pg_master_user }}:{{ pg_master_password }}@localhost:5432/{{ pg_database }}?application_name={{ service_name }}"
        start_cmd: "{{ deploy_path }}/{{ service_name }} -pg {{ pg_dsn }} {{ service.additional_args }}"
      no_log: true
      notify: restart service

- name: Deploy api service on replica nodes
  hosts: "{{ stack_name }}__{{ 'replica_nodes' }}"
  become: true
  serial: 1
  tags: [deploy]
  vars:
    service: "{{ services.api }}"
    service_name: "{{ stack_name }}__{{ service.service_name }}"
    artifact_root: "artifacts/{{ hostvars['localhost'].git_sha }}"
  handlers:
    - name: restart service
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: restarted
        enabled: true
        daemon_reload: true
      throttle: 1
  tasks:
    - name: Ensure binary directory
      ansible.builtin.file:
        path: "{{ deploy_path }}"
        state: directory
        mode: "0755"

    - name: Copy service binary
      ansible.builtin.copy:
        src: "{{ artifact_root }}/{{ service.binary_path }}"
        dest: "{{ deploy_path }}/{{ service_name }}"
        mode: "0755"
        owner: root
        group: root
      notify: restart service

    - name: Install libton-marker.so
      ansible.builtin.copy:
        src: "{{ artifact_root }}/libton-marker.so"
        dest: "/usr/lib/libton-marker.so"
        mode: "0644"
        owner: root
        group: root

    - name: Refresh linker cache
      ansible.builtin.command: ldconfig
      changed_when: false

    - name: Create systemd service from template
      ansible.builtin.template:
        src: "ansible/systemd.service.j2"
        dest: "{{ systemd_service_path }}/{{ service_name }}.service"
        mode: "0644"
        owner: root
        group: root
        force: true
      vars:
        pg_dsn: "postgresql://{{ pg_readonly_user }}:{{ pg_readonly_password }}@localhost:5432/{{ pg_database }}?application_name={{ service_name }}"
        pg_master_dsn: "postgresql://{{ pg_master_user }}:{{ pg_master_password }}@{{ pg_master }}/{{ pg_database }}?application_name={{ service_name }}"
        start_cmd: "{{ deploy_path }}/{{ service_name }} -pg {{ pg_dsn }} -pg-master {{ pg_master_dsn }} {{ service.additional_args }}"
      no_log: true
      notify: restart service
